# Generated by Django 3.1.7 on 2021-06-12 12:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Enter your email id', max_length=254, unique=True)),
                ('contact', models.IntegerField(help_text='Enter your contact number', null=True)),
                ('address', models.CharField(help_text='Enter your address', max_length=200, null=True)),
                ('pincode', models.IntegerField(help_text='Enter your pincode', null=True)),
                ('proof', models.ImageField(help_text='Enter your identity proof', null=True, upload_to='customer_proofs')),
                ('status', models.CharField(choices=[('P', 'Pending'), ('V', 'Verified')], default='P', max_length=1)),
                ('role', models.CharField(choices=[('C', 'Customer'), ('O', 'Operator')], help_text='Select your role', max_length=1, null=True, verbose_name='Select Your Role')),
                ('city', models.ForeignKey(help_text='Select your city', null=True, on_delete=django.db.models.deletion.CASCADE, to='BikeUsers.city')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('state', models.ForeignKey(help_text='Select your state', null=True, on_delete=django.db.models.deletion.CASCADE, to='BikeUsers.state')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Address')),
                ('post_code', models.CharField(blank=True, max_length=8, null=True, verbose_name='Post Code')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('longitude', models.CharField(blank=True, max_length=50, null=True, verbose_name='Longitude')),
                ('latitude', models.CharField(blank=True, max_length=50, null=True, verbose_name='Latitude')),
                ('city', models.ForeignKey(help_text='Select your city', null=True, on_delete=django.db.models.deletion.CASCADE, to='BikeUsers.city')),
            ],
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BikeUsers.state'),
        ),
        migrations.CreateModel(
            name='bike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bikename', models.CharField(help_text='Enter bike name', max_length=50)),
                ('brandname', models.CharField(help_text='Enter bike brand name', max_length=50)),
                ('price_hr', models.IntegerField(help_text='Enter bike price per hour')),
                ('price_day', models.IntegerField(help_text='Enter bike price per day', null=True)),
                ('registered_no', models.CharField(help_text='Enter bike registered number', max_length=50)),
                ('bike_image', models.ImageField(help_text='Add bike image', null=True, upload_to='bike_image')),
                ('bike_manufactured_date', models.DateField(help_text='Add Manufactured date of bike')),
                ('bikecolor', models.CharField(help_text='Enter bike color', max_length=50)),
                ('bikestatus', models.CharField(choices=[('W', 'Working'), ('N', 'Non-Working')], default='W', max_length=1)),
                ('station_id', models.IntegerField(help_text='Enter bike Station id')),
                ('operatorid', models.ForeignKey(help_text='Enter operator id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
